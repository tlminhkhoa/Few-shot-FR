# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lxGHUTUhUafoN2oiz2xaCT_jEh37BI3n
"""

# pip install mtcnn

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
from __future__ import print_function
import time
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn import svm
# %matplotlib inline
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
import pandas as pd
import os

directory = "/content/drive/MyDrive/CPS803/img_celeba/train embedding"
trainEmbeddings = pd.DataFrame()
for filename in os.listdir(directory):
  df_temp = pd.read_csv(directory + "/"+filename)
  trainEmbeddings = trainEmbeddings.append(df_temp)

trainEmbeddings

# with 7563 training example and 128 colums (excluding label and file)
trainEmbeddings.shape

# in total we have 253 labels
len(trainEmbeddings["label"].unique())

# from shutil import copytree
# directory = "/content/drive/MyDrive/img_celeba/train"
# traindict = list(os.listdir(directory))
# print(traindict)
# listLabel = list(trainEmbeddings["label"].unique())

# for label in listLabel:

#   if str(label) in traindict:
#     try:
#       copytree("/content/drive/MyDrive/img_celeba/train/" + str(label) + "" , "/content/drive/MyDrive/img_celeba/subset train/"+ str(label))
#     except FileExistsError:
#       continue

def dropZeros(row):
  first = row.iloc[0]
  sumRow = sum(row.iloc[:-2])

  if (sumRow == 0 and first == 0):
    return None
  else:
    return row

df_train = trainEmbeddings.apply(dropZeros,axis = 1).dropna()
df_train

df_train.shape

# around 80% of the trainset is detectable using MTCNNN
(df_train.shape[0] / trainEmbeddings.shape[0])*100

zeroslabel = []
for file in list(trainEmbeddings["file"]) :
  if file not in list(df_train["file"]):
    zeroslabel.append(file)

# around 1494 example is not detectable
len(zeroslabel)

#  consist of 20% of the example
(len(zeroslabel)/ trainEmbeddings.shape[0])*100

# With in 1878 undetected datappoint, the following is the distribution of type of augmentation
countDict= {}
for file in zeroslabel:
  splited = file.split("-") 
  if len(splited) == 1:
    if "unAugmented" not in countDict.keys():
      countDict["unAugmented"] =1 
    else:
      countDict["unAugmented"] += 1
  else:
    if splited[0] not in countDict.keys():
      countDict[splited[0]] =1 
    else:
      countDict[splited[0]] += 1

countDict

#  measure the center of each label
centroids = df_train.drop("file",axis =1).groupby(['label']).mean()
centroids

# create a dictionary contain the measurement of distance of every label pair.
distanctDict = {}
for label1 in centroids.index:
  distanctDict[label1] = {}
  for label2 in centroids.index:
    if label1 == label2:
      continue
    else:
      distanct = np.linalg.norm(centroids.loc[label1]-centroids.loc[label2])
      distanctDict[label1][label2] = distanct

label1Min = None
label2Min = None
min = 10000
for label in distanctDict.keys():
  for label2 in distanctDict[label].keys():
    distance = distanctDict[label][label2]
    if distance < min:
      label1Min = label
      label2Min = label2
      min = distance

label1Max = None
label2Max = None
max = -10000
for label in distanctDict.keys():
  for label2 in distanctDict[label].keys():
    distance = distanctDict[label][label2]
    if distance > max:
      label1Max = label
      label2Max = label2
      max = distance

# this 2 labels are the most similar 
(label1Min,label2Min,min)

# this 2 labels are the most difference 
(label1Max,label2Max,max)



# ----------------------------------------------------------------------------------------------------------

# sample 100 random classes
import random
numberRandomLabel = 100
randomLabel = random.sample(list(df_train["label"].unique()),k =numberRandomLabel)
randomLabel = [str(int(label)) for label in randomLabel]
len(randomLabel)

df_plot = df_train[df_train["label"].isin(randomLabel)]
df_plot

tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=1000)
tsne_results = tsne.fit_transform(df_plot.iloc[:,:128])

df_plot['tsne-2d-one'] = tsne_results[:,0]
df_plot['tsne-2d-two'] = tsne_results[:,1]
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="label",
    palette=sns.color_palette("hls", numberRandomLabel),
    data=df_plot,
    legend = False,
    alpha=0.5
)